# Fabric
FABRIC_TOKEN = "a31221dc945d82768ff8fba65613cdf825d49797"
FABRIC_SECRET = "2911e05e27da2b2ebe58e753cbac383d0dda0a1e102e4bd1bc30abe7d75f94e9"
FABRIC_LINK = "https://betas.to/sz2yqJCL"
FABRIC_TESTERS_GROUP = "demo"

# Application

TEAM_ID_DEV = "5G8856SBG8"
TEAM_ID_RELEASE = "E23BKKUH5D"

APPLICATION_NAME = "Commun"
BUNDLE_ID_DEV = "io.commun.eos.ios"
BUNDLE_ID_RELEASE = "com.commun.ios"
INFO_PLIST_PATH = "./Commun/Info.plist"

# Match
MATCH_TYPE_DEV = "adhoc"
MATCH_TYPE_RELEASE = "appstore"
MATCH_GIT_BRANCH_DEV = "dev"
MATCH_GIT_BRANCH_RELEASE = "release"

# -- User
APPLE_ID = "shilinartem@gmail.com"
SLACK_WEBHOOK = "https://hooks.slack.com/services/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"
SLACK_API_TOKEN = "xoxp-131522248727-816480031911-825767630514-3dc514ecb1a5e8985cc0a8d55066e67e"

lane :beta do |options|

	build(
		appstore: false,
		app_name: APPLICATION_NAME,
		plist_path: INFO_PLIST_PATH,
		bundle_id: BUNDLE_ID_DEV,
		profile_name: "match Development #{BUNDLE_ID_DEV}",
		team_id: TEAM_ID_DEV
	)

	build_path = ENV['BUILD_PATH']
	build_number = ENV['BUILD_NUMBER']

	crashlytics(
		api_token: FABRIC_TOKEN,
		build_secret: FABRIC_SECRET,
		groups: FABRIC_TESTERS_GROUP,
		notifications: "false"
	)

    slack_upload(
        slack_api_token: SLACK_API_TOKEN,
        title: "Commun-iOS-#{build_number}",
        channel: "#commun-mobile-builds",
        file_path: build_path
    ) 

	if isCI 
		sh("git tag CI.#{build_number}")
      	sh("git push --tags")
  	end

end

lane :release do 

	build(
		appstore: true,
		app_name: APPLICATION_NAME,
		plist_path: INFO_PLIST_PATH,
		bundle_id: BUNDLE_ID_RELEASE,
		icon_name: "AppIcon-PROD",
		profile_name: "match AppStore #{BUNDLE_ID_RELEASE}",
		team_id: TEAM_ID_RELEASE
	)

	build_path = ENV['BUILD_PATH']

	testflight(
		ipa: build_path,
		username: APPLE_ID,
		app_identifier: BUNDLE_ID_RELEASE,
		skip_waiting_for_build_processing: true,
		team_id: "118820022"
    )
end


private_lane :build do |options|
	# options
	appstore = 				options[:appstore]
	app_name = 				options[:app_name]
	plist_path = 			options[:plist_path]
	bundle_id = 			options[:bundle_id]
	build_number = 			options[:build_number] || number_of_commits(all: true)
	profile_name = 			options[:profile_name]
	icon_name = 			options[:icon_name]
	ipa_name = 				options[:ipa_name] || "#{app_name}-#{build_number}.ipa"
	team_id = 				options[:team_id]

	# props
	xcodeproj = 			"#{app_name}.xcodeproj"
	build_version = 		get_version_number(xcodeproj: xcodeproj)
	swift_flags = 			appstore ? '$(inherited) -DCOCOAPODS -DAPPSTORE' : '$(inherited) -DCOCOAPODS'
	output_directory = 		"build"
	export_method = 		appstore ? "app-store" : "ad-hoc"
	build_path = 			File.join(File.expand_path("..").shellescape, output_directory ,"#{ipa_name}")
	scheme = 				"#{app_name}"
	workspace = 			"#{app_name}.xcworkspace"
	archive_path = 			"#{output_directory}/#{app_name}.xcarchive"
	match_git_branch =		appstore ? MATCH_GIT_BRANCH_RELEASE : MATCH_GIT_BRANCH_DEV
	match_type = 			appstore ? MATCH_TYPE_RELEASE : MATCH_TYPE_DEV
	provisioning_profile =  "match #{match_type} #{bundle_id}"

	# Log
	UI.success "appstore: #{appstore}"
	UI.success "app_name: #{app_name}"
	UI.success "plist_path: #{plist_path}"
	UI.success "build_number: #{build_number}"
	UI.success "bundle_id: #{bundle_id}"
	UI.success "profile_name: #{profile_name}"
	UI.success "icon_name: #{icon_name}"
	UI.success "ipa_name: #{ipa_name}"
	UI.success "team_id: #{team_id}"

	UI.success "xcodeproj: #{xcodeproj}"
	UI.success "build_version: #{build_version}"
	UI.success "swift_flags: #{swift_flags}"
	UI.success "output_directory: #{output_directory}"
	UI.success "build_path: #{build_path}"
	UI.success "scheme: #{scheme}"
	UI.success "workspace: #{workspace}"
	UI.success "archive_path: #{archive_path}"
	UI.success "match_git_branch: #{match_git_branch}"
	UI.success "match_type: #{match_type}"
	UI.success "provisioning_profile: #{provisioning_profile}"

	# update app icon
	if icon_name 
		change_icon(
			xcodeproj: xcodeproj,
			name: icon_name
		)
	end

	# update bundle id
	update_app_identifier(
		xcodeproj: xcodeproj,
		plist_path: plist_path,
		app_identifier: bundle_id
	)

	# change build number
    increment_build_number(
    	xcodeproj: xcodeproj,
    	build_number: build_number
    )

	# add cert
	match(
		git_branch: match_git_branch,
		generate_apple_certs: true,
		app_identifier: bundle_id,
		type: match_type,
		readonly: true
	)

	# manual signing
	automatic_code_signing(
		team_id: team_id,
		bundle_identifier: bundle_id,
		use_automatic_signing: false,
		code_sign_identity: appstore ? "iPhone Distribution" : "iPhone Developer",

	)

	# pod install
	cocoapods

	UI.success "ðŸ¤– Start Build: #{app_name} #{build_version} (#{build_number})"

	# run build
    gym(
		clean: true,
		scheme: scheme,
		workspace: workspace,
		archive_path: archive_path,
		output_directory: output_directory,
		output_name: ipa_name,
		include_bitcode: false,
		export_method: export_method,
		xcargs: {
			:BUNDLE_IDENTIFIER => bundle_id,
			:PROVISIONING_PROFILE_SPECIFIER => profile_name,
			:DEVELOPMENT_TEAM => team_id,
			:OTHER_SWIFT_FLAGS => swift_flags
		}
    )

    # create build path
	ENV['BUILD_PATH'] = "#{build_path}"
	ENV['BUILD_NUMBER'] = "#{build_number}"

	UI.message "Build Path: #{build_path}"
end

private_lane :change_icon do |options|
	old_icon_name = options[:old_name] || "AppIcon"
	new_icon_name = options[:name]
	xcodeproj = options[:xcodeproj]

    if new_icon_name && xcodeproj
    	project_path = File.join(File.expand_path("..").shellescape, xcodeproj, "project.pbxproj")
		data = File.read(project_path)
		filtered_data = data.gsub(old_icon_name, new_icon_name)

		# Save modified file
		File.open(project_path, "w") do |f|
			f.write(filtered_data)
		end
    else
    	UI.error "Params name and xcodeproj required"
	end
end

desc 'Update profiles and add new devices'
lane :update_profiles do 

	match(
		git_branch: MATCH_GIT_BRANCH_RELEASE,
		username: APPLE_ID,
		team_id: TEAM_ID_RELEASE,
		app_identifier: BUNDLE_ID_RELEASE,
		generate_apple_certs: true,
		type: MATCH_TYPE_RELEASE,
		readonly: false,
		force: true
	)

	match(
		git_branch: MATCH_GIT_BRANCH_DEV,
		username: APPLE_ID,
		team_id: TEAM_ID_DEV,
		app_identifier: BUNDLE_ID_DEV,
		generate_apple_certs: true,
		type: MATCH_TYPE_DEV,
		readonly: false,
		force_for_new_devices: true,
		force: true
	)
end

# # -- End build or error --

# after_all do |lane|
# 	end_clear
# end

# error do |lane, exception|
# 	end_clear
# end



